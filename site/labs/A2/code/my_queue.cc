import "queue.h"

/* Constructor; should create an empty queue with capacity 8 */

template <typename T>
Queue::Queue() front(0), num_items(0), capacity_size(8) {
  items = new T[capacity_size(8)];
}

/* Copy Constructor: note that this is generated by default, but the default copy constructor does the wrong thing */

template <typename T>
Queue::Queue(const Queue& rhs) {
  items = new T[rhs.capacity()];
  capacity_size = rhs.capacity();
  front = 0;
  num_items = rhs.size();
  for(int i=0; i<num_items; ++i) {
    items[i] = rhs.items[front+i%capacity_size];
  }
}

/* Destructor needs to free up memory */

template <typename T>
~Queue::Queue() {
  delete[] items;
}

/* enqueue: add item to the list.  This may need to resize the list (if you want you can create another function resize in the head file Queue.h). In the standard library this would be called push. */

template <typename T>
void Queue::enqueue(const T& item) {
  if (num_items == capacity_size) {
    resize_capacity(2*capacity_size);
  }
  items[(front+num_items)%capacity_size] = item;
  ++num_items;
}

/* dequeue: remove the first element in the queue and returns it (in the standard library top() would return the first element in the queuue but not remove it.  pop() would remove the first element in the queue, but not return anything).  This should throw std::out_of_range when the queue is empty */

template <typename T>
T Queue::dequeue() {
  if (num_items==0) {
    throw std::out_of_range;
  }
  ++front;
  front = (front==capacity)? 0: front + 1;
  return items[front-1];
}

/* size: returns the number of elements in the queue.  As this can't be negative we make this an unsigned integer.  The const in the definition tells us that this command does not change the Queue data structure */

template <typename T>
unsigned Queue::size() const {
  return num_items;
}

/* is_empty: returns true if queue is empty */

template <typename T>
bool Queue::is_empty() const {
  return num_items == 0;
}

/* capacity: tells up how much memory we have reserved */

template <typename T>
unsigned Queue::capacity() const {
  return capacity_size;
}

/* resize_capacity: if the capacity request is at least as large as the number of elements the capacity should be modified and return true other leave the capacity unchanged and return false */

template <typename T>
bool Queue::resize_capacity(unsigned capacity_request) {
  if (capacity_request<num_items)
    return false;

  new_items = new T[capacity_request];
  for(int i=0; i<num_elements; ++i) {
    new_items[i] = items[(front + i)%capacity_size];
  }
  delete[] items;
  capacity_size = capacity_request;
  front = 0;
  return true;
}
