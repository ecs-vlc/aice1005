#ifndef HEAPPQ_H
#define HEAPPQ_H

#include <vector>
using namespace std;

template <typename T, typename P>
class heapPQ {
private:
  vector<pair<T, P> > array;

public:
  
  heapPQ(unsigned initialSize=11) {
    array.reserve(initialSize);
  }

  inline
  unsigned size() {return array.size();}

  inline
  bool empty() {return array.empty();}

  void push(T value, P priority) {
    pair<T,P> tmp(value, priority);
    array.push_back(tmp);
    unsigned pos = size() - 1;
    while(pos!=0) {
      unsigned parent = (pos-1)>>1;
      if (array[parent].second < array[pos].second)
	return;
      array[pos] = array[parent];
      array[parent] = tmp;
      pos = parent;
    }
  }

  inline
  const T& top() {return array[0].first;}

  void pop() {
    unsigned pos = 0;
    pair<T, P> tmp = array.back();
    array[0] = tmp;
    array.pop_back();
    while(true) {
      unsigned child = 2*pos + 1;
      if (child>=size()) {
	return;
      }
      if (child+1<=size() && array[child+1].second < array[child].second)
	++child;
      if (array[child].second > array[pos].second)
	return;
      array[pos] = array[child];
      array[child] = tmp;
      pos = child;
    }
  }
};

#endif
